window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "autoop", "modulename": "autoop", "kind": "module", "doc": "<p>Package for machine learning applications.</p>\n\n<h6 id=\"subpackages\">Subpackages:</h6>\n\n<blockquote>\n  <ul>\n  <li>core: package for the core classes and functionalities</li>\n  <li>functional: package for functinal tasks like feature detection\n  and preprocessing</li>\n  </ul>\n</blockquote>\n"}, {"fullname": "autoop.core", "modulename": "autoop.core", "kind": "module", "doc": "<p>Package for the core classes and fucntionalities, including handling of\nstorage, ML models, and pipelines.</p>\n\n<h6 id=\"subpackages\">Subpackages:</h6>\n\n<blockquote>\n  <ul>\n  <li>ml: Package for machine learning related classes and functionalities</li>\n  </ul>\n</blockquote>\n\n<h6 id=\"modules\">Modules:</h6>\n\n<blockquote>\n  <ul>\n  <li>database: allows for the creation of a database object</li>\n  <li>storage: allows for the creation of storage-related objects for handling\n  the storage of files</li>\n  </ul>\n</blockquote>\n"}, {"fullname": "autoop.core.database", "modulename": "autoop.core.database", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "autoop.core.database.Database", "modulename": "autoop.core.database", "qualname": "Database", "kind": "class", "doc": "<p>Class representing a database.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>_storage (Storage):</strong>  the storage linked to the database.</li>\n<li><strong>_data (dict):</strong>  ditionary containing the data currently loaded into the\ndatabase.</li>\n</ul>\n"}, {"fullname": "autoop.core.database.Database.__init__", "modulename": "autoop.core.database", "qualname": "Database.__init__", "kind": "function", "doc": "<p>Initialise an object of the Database class.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>storage:</strong>  the storage linked to the database</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">storage</span><span class=\"p\">:</span> <span class=\"n\">autoop</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">storage</span><span class=\"o\">.</span><span class=\"n\">Storage</span></span>)</span>"}, {"fullname": "autoop.core.database.Database.set", "modulename": "autoop.core.database", "qualname": "Database.set", "kind": "function", "doc": "<p>Add an item to the database and update the storage.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>collection (str):</strong>  The collection to store the data in</li>\n<li><strong>id (str):</strong>  The id of the data</li>\n<li><strong>entry (dict):</strong>  The data to store</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>dict: The data that was stored</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">collection</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"nb\">id</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">entry</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "autoop.core.database.Database.get", "modulename": "autoop.core.database", "qualname": "Database.get", "kind": "function", "doc": "<p>Get a stored entry from the database</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>collection (str):</strong>  The collection to get the data from</li>\n<li><strong>id (str):</strong>  The id of the data to get</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Union[dict, None]: The data that was stored, or\n  None if it doesn't exist</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">collection</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"nb\">id</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "autoop.core.database.Database.delete", "modulename": "autoop.core.database", "qualname": "Database.delete", "kind": "function", "doc": "<p>Delete an entry from the database.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>collection (str):</strong>  The collection to delete the data from</li>\n<li><strong>id (str):</strong>  The id of the data to delete</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">collection</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"nb\">id</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "autoop.core.database.Database.list", "modulename": "autoop.core.database", "qualname": "Database.list", "kind": "function", "doc": "<p>Lists all data in a collection.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>collection (str):</strong>  The collection to list the data from</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>List[Tuple[str, dict]]: A list of tuples containing the id and\n  data for each item in the collection</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">collection</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "autoop.core.database.Database.refresh", "modulename": "autoop.core.database", "qualname": "Database.refresh", "kind": "function", "doc": "<p>Refresh the database by loading the data from storage</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "autoop.core.ml", "modulename": "autoop.core.ml", "kind": "module", "doc": "<p>Package for machine learning related classes and functionalities.</p>\n\n<h6 id=\"subpackages\">Subpackages:</h6>\n\n<blockquote>\n  <ul>\n  <li>model: Package for the available machine learning models</li>\n  </ul>\n</blockquote>\n\n<h6 id=\"modules\">Modules:</h6>\n\n<blockquote>\n  <ul>\n  <li>artifact: alows for the creation of artifact object to represent other\n  objects</li>\n  <li>dataset: allows for the creation of a dataset object to represent a\n  database</li>\n  <li>feature: defines the feature type to identify data by</li>\n  <li>metric: defines multiple classification and regression metrigs by which\n  to analyse the predictions</li>\n  <li>pipeline: allows for the creation of a machine learning pipeline</li>\n  </ul>\n</blockquote>\n"}, {"fullname": "autoop.core.ml.artifact", "modulename": "autoop.core.ml.artifact", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "autoop.core.ml.artifact.Artifact", "modulename": "autoop.core.ml.artifact", "qualname": "Artifact", "kind": "class", "doc": "<p>Class representing an artifact.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>type (str):</strong>  asset's type</li>\n<li><strong>name (str):</strong>  asste's name</li>\n<li><strong>version (str):</strong>  asset's version</li>\n<li><strong>asset_path (str):</strong>  the path to the asset</li>\n<li><strong>data (bytes):</strong>  state of the data</li>\n<li><strong>tags (list[str]):</strong>  list of the tags for the asset</li>\n<li><strong>metadata (dict):</strong>  dcitionary holding the asset's metadata</li>\n<li><strong>id:</strong>  id of the artifact in the database</li>\n</ul>\n"}, {"fullname": "autoop.core.ml.artifact.Artifact.__init__", "modulename": "autoop.core.ml.artifact", "qualname": "Artifact.__init__", "kind": "function", "doc": "<p>Initialize an Artifact object.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>type (str):</strong>  asset's type</li>\n<li><strong>name (str):</strong>  asste's name</li>\n<li><strong>version (str):</strong>  asset's version</li>\n<li><strong>asset_path (str):</strong>  the path to the asset</li>\n<li><strong>data (bytes):</strong>  state of the data</li>\n<li><strong>tags (list[str]):</strong>  list of the tags for the asset</li>\n<li><strong>metadata (dict):</strong>  dcitionary holding the asset's metadata</li>\n<li><strong>id:</strong>  id of the artifact in the database</li>\n</ul>\n\n<p>returns:\n    None</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"nb\">type</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">version</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">asset_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">bytes</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">tags</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">metadata</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"nb\">id</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "autoop.core.ml.artifact.Artifact.type", "modulename": "autoop.core.ml.artifact", "qualname": "Artifact.type", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "autoop.core.ml.artifact.Artifact.name", "modulename": "autoop.core.ml.artifact", "qualname": "Artifact.name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "autoop.core.ml.artifact.Artifact.version", "modulename": "autoop.core.ml.artifact", "qualname": "Artifact.version", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "autoop.core.ml.artifact.Artifact.asset_path", "modulename": "autoop.core.ml.artifact", "qualname": "Artifact.asset_path", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "autoop.core.ml.artifact.Artifact.data", "modulename": "autoop.core.ml.artifact", "qualname": "Artifact.data", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "autoop.core.ml.artifact.Artifact.tags", "modulename": "autoop.core.ml.artifact", "qualname": "Artifact.tags", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "autoop.core.ml.artifact.Artifact.metadata", "modulename": "autoop.core.ml.artifact", "qualname": "Artifact.metadata", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "autoop.core.ml.artifact.Artifact.id", "modulename": "autoop.core.ml.artifact", "qualname": "Artifact.id", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "autoop.core.ml.artifact.Artifact.read", "modulename": "autoop.core.ml.artifact", "qualname": "Artifact.read", "kind": "function", "doc": "<p>Return a dataframe containing the artifact's data.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>DataFrame: dataframe containing the artifact's data</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "autoop.core.ml.artifact.Artifact.save", "modulename": "autoop.core.ml.artifact", "qualname": "Artifact.save", "kind": "function", "doc": "<p>Save new data and return it.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>new_data:</strong>  data to be saved</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bytes: the saved data</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">new_data</span><span class=\"p\">:</span> <span class=\"nb\">bytes</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bytes</span>:</span></span>", "funcdef": "def"}, {"fullname": "autoop.core.ml.dataset", "modulename": "autoop.core.ml.dataset", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "autoop.core.ml.dataset.Dataset", "modulename": "autoop.core.ml.dataset", "qualname": "Dataset", "kind": "class", "doc": "<p>A class to represent an ML dataset</p>\n", "bases": "autoop.core.ml.artifact.Artifact"}, {"fullname": "autoop.core.ml.dataset.Dataset.__init__", "modulename": "autoop.core.ml.dataset", "qualname": "Dataset.__init__", "kind": "function", "doc": "<p>Initialize a dataset object</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "autoop.core.ml.dataset.Dataset.from_dataframe", "modulename": "autoop.core.ml.dataset", "qualname": "Dataset.from_dataframe", "kind": "function", "doc": "<p>Construct a dataset from a given dataframe.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>data:</strong>  provided dataframe</li>\n<li><strong>name:</strong>  name of the dataset</li>\n<li><strong>asset_path:</strong>  path of the asset corresponding to the dataset</li>\n<li><strong>id:</strong>  id of the dataset in the database</li>\n<li><strong>version:</strong>  version of the dataset</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Dataste: created dataset</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">asset_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"nb\">id</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">version</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;1.0.0&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "autoop.core.ml.dataset.Dataset.save", "modulename": "autoop.core.ml.dataset", "qualname": "Dataset.save", "kind": "function", "doc": "<p>Save data into the database.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>data:</strong>  dataframe containing the data.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bytes: the encoded version of the saved data.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bytes</span>:</span></span>", "funcdef": "def"}, {"fullname": "autoop.core.ml.feature", "modulename": "autoop.core.ml.feature", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "autoop.core.ml.feature.Feature", "modulename": "autoop.core.ml.feature", "qualname": "Feature", "kind": "class", "doc": "<p>Class representing a feature of our dataset.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>name:</strong>  string representing the feature's name.</li>\n<li><strong>type:</strong>  string representing the feature's type (numerical or categorical)</li>\n</ul>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "autoop.core.ml.feature.Feature.name", "modulename": "autoop.core.ml.feature", "qualname": "Feature.name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "autoop.core.ml.feature.Feature.type", "modulename": "autoop.core.ml.feature", "qualname": "Feature.type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "autoop.core.ml.feature.Feature.to_tuple", "modulename": "autoop.core.ml.feature", "qualname": "Feature.to_tuple", "kind": "function", "doc": "<p>Turn the feature into a tuple.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>tuple: the string's tuple representation</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "autoop.core.ml.feature.Feature.from_tuple", "modulename": "autoop.core.ml.feature", "qualname": "Feature.from_tuple", "kind": "function", "doc": "<p>Construct a feature object from a tuple.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>tuple_self:</strong>  tuple representing the feature</li>\n</ul>\n\n<h6 id=\"rturns\">Rturns:</h6>\n\n<blockquote>\n  <p>Feature: feature created from the given tuple</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">tuple_self</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span></span><span class=\"return-annotation\">) -> <span class=\"n\">autoop</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">ml</span><span class=\"o\">.</span><span class=\"n\">feature</span><span class=\"o\">.</span><span class=\"n\">Feature</span>:</span></span>", "funcdef": "def"}, {"fullname": "autoop.core.ml.feature.Feature.model_config", "modulename": "autoop.core.ml.feature", "qualname": "Feature.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{}"}, {"fullname": "autoop.core.ml.feature.Feature.model_fields", "modulename": "autoop.core.ml.feature", "qualname": "Feature.model_fields", "kind": "variable", "doc": "<p>Metadata about the fields defined on the model,\nmapping of field names to [<code>FieldInfo</code>][pydantic.fields.FieldInfo] objects.</p>\n\n<p>This replaces <code>Model.__fields__</code> from Pydantic V1.</p>\n", "annotation": ": ClassVar[Dict[str, pydantic.fields.FieldInfo]]", "default_value": "{&#x27;name&#x27;: FieldInfo(annotation=str, required=True), &#x27;type&#x27;: FieldInfo(annotation=str, required=True)}"}, {"fullname": "autoop.core.ml.feature.Feature.model_computed_fields", "modulename": "autoop.core.ml.feature", "qualname": "Feature.model_computed_fields", "kind": "variable", "doc": "<p>A dictionary of computed field names and their corresponding <code>ComputedFieldInfo</code> objects.</p>\n", "annotation": ": ClassVar[Dict[str, pydantic.fields.ComputedFieldInfo]]", "default_value": "{}"}, {"fullname": "autoop.core.ml.metric", "modulename": "autoop.core.ml.metric", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "autoop.core.ml.metric.METRICS", "modulename": "autoop.core.ml.metric", "qualname": "METRICS", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;mean_squared_error&#x27;, &#x27;accuracy&#x27;, &#x27;precision_macro&#x27;, &#x27;recall_macro&#x27;, &#x27;mean_absolute_error&#x27;, &#x27;r_squared&#x27;]"}, {"fullname": "autoop.core.ml.metric.Metric", "modulename": "autoop.core.ml.metric", "qualname": "Metric", "kind": "class", "doc": "<p>Abstract base class for all metrics.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>_type(str):</strong>  'numerical' or 'categorical', depending on the metric's\nsupported type</li>\n<li><strong>_name:</strong>  metric's name</li>\n</ul>\n", "bases": "abc.ABC"}, {"fullname": "autoop.core.ml.metric.Metric.name", "modulename": "autoop.core.ml.metric", "qualname": "Metric.name", "kind": "variable", "doc": "<p>Return metric's name.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: metric's name</p>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "autoop.core.ml.metric.Metric.type", "modulename": "autoop.core.ml.metric", "qualname": "Metric.type", "kind": "variable", "doc": "<p>Return a metric's type.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: metric's type</p>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "autoop.core.ml.metric.Metric.evaluate", "modulename": "autoop.core.ml.metric", "qualname": "Metric.evaluate", "kind": "function", "doc": "<p>Evaluate the predictions based on the given ground truth.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>predictions:</strong>  the predictions generated by our model.</li>\n<li><strong>actual:</strong>  the actual ground truth.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>float: number representing our evaluated metric.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">predictions</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">actual</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "autoop.core.ml.metric.MeanSquaredError", "modulename": "autoop.core.ml.metric", "qualname": "MeanSquaredError", "kind": "class", "doc": "<p>Class representing the mean-squared-error metric.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>_type(str):</strong>  'numerical', the metric's</li>\n<li><strong>_name:</strong>  metric's name</li>\n</ul>\n", "bases": "Metric"}, {"fullname": "autoop.core.ml.metric.MeanSquaredError.evaluate", "modulename": "autoop.core.ml.metric", "qualname": "MeanSquaredError.evaluate", "kind": "function", "doc": "<p>Evaluate the predictions based on the given ground truth.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>predictions:</strong>  the predictions generated by our model.</li>\n<li><strong>actual:</strong>  the actual ground truth.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>float number representing our evaluated metric.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">predictions</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">actual</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "autoop.core.ml.metric.Accuracy", "modulename": "autoop.core.ml.metric", "qualname": "Accuracy", "kind": "class", "doc": "<p>Class representing the accuracy metric.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>_type(str):</strong>  'categorical', the metric's</li>\n<li><strong>_name:</strong>  metric's name</li>\n</ul>\n", "bases": "Metric"}, {"fullname": "autoop.core.ml.metric.Accuracy.evaluate", "modulename": "autoop.core.ml.metric", "qualname": "Accuracy.evaluate", "kind": "function", "doc": "<p>Evaluate the predictions based on the given ground truth.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>predictions:</strong>  the predictions generated by our model.</li>\n<li><strong>actual:</strong>  the actual ground truth.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>float number representing our evaluated metric.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">predictions</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">actual</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "autoop.core.ml.metric.PrecisionMacro", "modulename": "autoop.core.ml.metric", "qualname": "PrecisionMacro", "kind": "class", "doc": "<p>Class representing the macro precision metric.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>_type(str):</strong>  'categorical', the metric's</li>\n<li><strong>_name:</strong>  metric's name</li>\n</ul>\n", "bases": "Metric"}, {"fullname": "autoop.core.ml.metric.PrecisionMacro.evaluate", "modulename": "autoop.core.ml.metric", "qualname": "PrecisionMacro.evaluate", "kind": "function", "doc": "<p>Evaluate the predictions based on the given ground truth.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>predictions:</strong>  the predictions generated by our model.</li>\n<li><strong>actual:</strong>  the actual ground truth.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>float number representing our evaluated metric.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">predictions</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">actual</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "autoop.core.ml.metric.RecallMacro", "modulename": "autoop.core.ml.metric", "qualname": "RecallMacro", "kind": "class", "doc": "<p>Class representing the macro recall metric.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>_type(str):</strong>  'categorical', the metric's</li>\n<li><strong>_name:</strong>  metric's name</li>\n</ul>\n", "bases": "Metric"}, {"fullname": "autoop.core.ml.metric.RecallMacro.evaluate", "modulename": "autoop.core.ml.metric", "qualname": "RecallMacro.evaluate", "kind": "function", "doc": "<p>Evaluate the predictions based on the given ground truth.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>predictions:</strong>  the predictions generated by our model.</li>\n<li><strong>actual:</strong>  the actual ground truth.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>float number representing our evaluated metric.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">predictions</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">actual</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "autoop.core.ml.metric.MeanAbsoluteError", "modulename": "autoop.core.ml.metric", "qualname": "MeanAbsoluteError", "kind": "class", "doc": "<p>Class representing the mean metric.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>_type(str):</strong>  'numerical', the metric's</li>\n<li><strong>_name:</strong>  metric's name</li>\n</ul>\n", "bases": "Metric"}, {"fullname": "autoop.core.ml.metric.MeanAbsoluteError.evaluate", "modulename": "autoop.core.ml.metric", "qualname": "MeanAbsoluteError.evaluate", "kind": "function", "doc": "<p>Evaluate the predictions based on the given ground truth.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>predictions:</strong>  the predictions generated by our model.</li>\n<li><strong>actual:</strong>  the actual ground truth.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>float number representing our evaluated metric.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">predictions</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">actual</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "autoop.core.ml.metric.RSquared", "modulename": "autoop.core.ml.metric", "qualname": "RSquared", "kind": "class", "doc": "<p>Class representing the R-squared error.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>_type(str):</strong>  'numerical', the metric's</li>\n<li><strong>_name:</strong>  metric's name</li>\n</ul>\n", "bases": "Metric"}, {"fullname": "autoop.core.ml.metric.RSquared.evaluate", "modulename": "autoop.core.ml.metric", "qualname": "RSquared.evaluate", "kind": "function", "doc": "<p>Evaluate the predictions based on the given ground truth.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>predictions:</strong>  the predictions generated by our model.</li>\n<li><strong>actual:</strong>  the actual ground truth.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>float number representing our evaluated metric.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">predictions</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">actual</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "autoop.core.ml.metric.get_metric", "modulename": "autoop.core.ml.metric", "qualname": "get_metric", "kind": "function", "doc": "<p>Factory function to get a metric by name.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name:</strong>  name of the metric</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Metric: a metric instance corresponding to the given name</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">autoop</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">ml</span><span class=\"o\">.</span><span class=\"n\">metric</span><span class=\"o\">.</span><span class=\"n\">Metric</span>:</span></span>", "funcdef": "def"}, {"fullname": "autoop.core.ml.model", "modulename": "autoop.core.ml.model", "kind": "module", "doc": "<p>Package containing classification and regression models\nand tools for their handling.</p>\n\n<h6 id=\"subpackages\">Subpackages:</h6>\n\n<blockquote>\n  <ul>\n  <li>classification: package for classification machine learning models</li>\n  <li>regression: package for regression machine learning models</li>\n  </ul>\n</blockquote>\n\n<h6 id=\"modules\">Modules:</h6>\n\n<blockquote>\n  <ul>\n  <li>get_model: allows to get a ML model by its name</li>\n  <li>model: defines abstract Model class that stands at the base of the other\n  ML models</li>\n  </ul>\n</blockquote>\n"}, {"fullname": "autoop.core.ml.model.classification", "modulename": "autoop.core.ml.model.classification", "kind": "module", "doc": "<p>Package containing classification models.</p>\n\n<h6 id=\"modules\">Modules:</h6>\n\n<blockquote>\n  <ul>\n  <li>decision_tree_calssifier: defines the Decision Tree Classifier model</li>\n  <li>knn_classifier: defines the KNN Classifier model</li>\n  <li>random_forest_classifier: defines the Random Forest Classifier model</li>\n  </ul>\n</blockquote>\n"}, {"fullname": "autoop.core.ml.model.classification.decision_tree_calssifier", "modulename": "autoop.core.ml.model.classification.decision_tree_calssifier", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "autoop.core.ml.model.classification.decision_tree_calssifier.DecisionTreeClassifierModel", "modulename": "autoop.core.ml.model.classification.decision_tree_calssifier", "qualname": "DecisionTreeClassifierModel", "kind": "class", "doc": "<p>Facade class for the sklean Lasso model.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>_type(str):</strong>  static attribute representing the Model's type:\nclassification</li>\n<li><strong>_name(str):</strong>  static attribute representing the model's name</li>\n<li><strong>_model(DecisionTreeClassifier):</strong>  sklearn's DecisionTreeClassifier\nmodel used\nfor the calculations.</li>\n</ul>\n", "bases": "autoop.core.ml.model.model.Model"}, {"fullname": "autoop.core.ml.model.classification.decision_tree_calssifier.DecisionTreeClassifierModel.__init__", "modulename": "autoop.core.ml.model.classification.decision_tree_calssifier", "qualname": "DecisionTreeClassifierModel.__init__", "kind": "function", "doc": "<p>Initialise an instance of the class</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "autoop.core.ml.model.classification.decision_tree_calssifier.DecisionTreeClassifierModel.fit", "modulename": "autoop.core.ml.model.classification.decision_tree_calssifier", "qualname": "DecisionTreeClassifierModel.fit", "kind": "function", "doc": "<p>Fits the decision tree classifier model to the data.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x:</strong>  array of observations.</li>\n<li><strong>y:</strong>  array of ground truth</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "autoop.core.ml.model.classification.decision_tree_calssifier.DecisionTreeClassifierModel.predict", "modulename": "autoop.core.ml.model.classification.decision_tree_calssifier", "qualname": "DecisionTreeClassifierModel.predict", "kind": "function", "doc": "<p>Makes predictions for the given observations.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x:</strong>  observations on which to make prediction</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>ndarray: array containing the predictions</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "autoop.core.ml.model.classification.decision_tree_calssifier.DecisionTreeClassifierModel.parameters", "modulename": "autoop.core.ml.model.classification.decision_tree_calssifier", "qualname": "DecisionTreeClassifierModel.parameters", "kind": "variable", "doc": "<p>Returns the model parameters.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>dict: model's parameters</p>\n</blockquote>\n", "annotation": ": dict"}, {"fullname": "autoop.core.ml.model.classification.knn_classifier", "modulename": "autoop.core.ml.model.classification.knn_classifier", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "autoop.core.ml.model.classification.knn_classifier.KNNClassifierModel", "modulename": "autoop.core.ml.model.classification.knn_classifier", "qualname": "KNNClassifierModel", "kind": "class", "doc": "<p>K-Nearest Neighbors Classifier for classification tasks.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>_type (str):</strong>  Model type (classification)</li>\n<li><strong>_name (str):</strong>  Model name</li>\n<li><strong>_model (KNeighborsClassifier):</strong>  Instance of KNeighborsClassifier</li>\n</ul>\n", "bases": "autoop.core.ml.model.model.Model"}, {"fullname": "autoop.core.ml.model.classification.knn_classifier.KNNClassifierModel.__init__", "modulename": "autoop.core.ml.model.classification.knn_classifier", "qualname": "KNNClassifierModel.__init__", "kind": "function", "doc": "<p>Initialize an instance of the KNNClassifierModel class.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "autoop.core.ml.model.classification.knn_classifier.KNNClassifierModel.fit", "modulename": "autoop.core.ml.model.classification.knn_classifier", "qualname": "KNNClassifierModel.fit", "kind": "function", "doc": "<p>Train the model using observations and ground truth.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>observations:</strong>  array of observations</li>\n<li><strong>fground_truth:</strong>  array of ground truth</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">observations</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">ground_truth</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "autoop.core.ml.model.classification.knn_classifier.KNNClassifierModel.predict", "modulename": "autoop.core.ml.model.classification.knn_classifier", "qualname": "KNNClassifierModel.predict", "kind": "function", "doc": "<p>Predict based on the provided observations.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>observations:</strong>  observations used for prediction</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>ndarray: array of predictions</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">observations</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "autoop.core.ml.model.classification.knn_classifier.KNNClassifierModel.parameters", "modulename": "autoop.core.ml.model.classification.knn_classifier", "qualname": "KNNClassifierModel.parameters", "kind": "variable", "doc": "<p>Return model's parameters.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>dict: model's parameters</p>\n</blockquote>\n", "annotation": ": dict"}, {"fullname": "autoop.core.ml.model.classification.random_forest_classifier", "modulename": "autoop.core.ml.model.classification.random_forest_classifier", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "autoop.core.ml.model.classification.random_forest_classifier.RandomForestClassifierModel", "modulename": "autoop.core.ml.model.classification.random_forest_classifier", "qualname": "RandomForestClassifierModel", "kind": "class", "doc": "<p>Random Forest Classifier for classification tasks.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>_type (str):</strong>  Model type (classification)</li>\n<li><strong>_name (str):</strong>  Model name</li>\n<li><strong>_model (RandomForestClassifier):</strong>  Instance of RandomForestClassifier</li>\n</ul>\n", "bases": "autoop.core.ml.model.model.Model"}, {"fullname": "autoop.core.ml.model.classification.random_forest_classifier.RandomForestClassifierModel.__init__", "modulename": "autoop.core.ml.model.classification.random_forest_classifier", "qualname": "RandomForestClassifierModel.__init__", "kind": "function", "doc": "<p>Initialize an instance of the RandomForestClassifierModel class.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "autoop.core.ml.model.classification.random_forest_classifier.RandomForestClassifierModel.fit", "modulename": "autoop.core.ml.model.classification.random_forest_classifier", "qualname": "RandomForestClassifierModel.fit", "kind": "function", "doc": "<p>Train the model using observations and ground truth.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>observations:</strong>  array of observations</li>\n<li><strong>fground_truth:</strong>  array of ground truth</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">observations</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">ground_truth</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "autoop.core.ml.model.classification.random_forest_classifier.RandomForestClassifierModel.predict", "modulename": "autoop.core.ml.model.classification.random_forest_classifier", "qualname": "RandomForestClassifierModel.predict", "kind": "function", "doc": "<p>Predict based on the provided observations.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>observations:</strong>  observations used for prediction</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>ndarray: array of predictions</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">observations</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "autoop.core.ml.model.classification.random_forest_classifier.RandomForestClassifierModel.parameters", "modulename": "autoop.core.ml.model.classification.random_forest_classifier", "qualname": "RandomForestClassifierModel.parameters", "kind": "variable", "doc": "<p>Return model's parameters.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>dict: model's parameters</p>\n</blockquote>\n", "annotation": ": dict"}, {"fullname": "autoop.core.ml.model.get_model", "modulename": "autoop.core.ml.model.get_model", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "autoop.core.ml.model.get_model.REGRESSION_MODELS", "modulename": "autoop.core.ml.model.get_model", "qualname": "REGRESSION_MODELS", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;lasso regression&#x27;, &#x27;multiple linear regression&#x27;, &#x27;ridge regression&#x27;]"}, {"fullname": "autoop.core.ml.model.get_model.CLASSIFICATION_MODELS", "modulename": "autoop.core.ml.model.get_model", "qualname": "CLASSIFICATION_MODELS", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;decision tree classifier&#x27;, &#x27;k-nearest neighbors classifier&#x27;, &#x27;random forest classifier&#x27;]"}, {"fullname": "autoop.core.ml.model.get_model.get_model", "modulename": "autoop.core.ml.model.get_model", "qualname": "get_model", "kind": "function", "doc": "<p>Return a model from a given name.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>model_name:</strong>  name of the model top return</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Model: model named by the given name</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">model_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">autoop</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">ml</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">Model</span>:</span></span>", "funcdef": "def"}, {"fullname": "autoop.core.ml.model.model", "modulename": "autoop.core.ml.model.model", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "autoop.core.ml.model.model.Model", "modulename": "autoop.core.ml.model.model", "qualname": "Model", "kind": "class", "doc": "<p>Abstract class for machine learning models.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>_type(str):</strong>  static attribute representing the Model's type: regression\nor classification</li>\n<li><strong>_name(str):</strong>  static attribute representing the model's name</li>\n<li><strong>_parameters(dict):</strong>  dictionary holding learned parameters.</li>\n</ul>\n", "bases": "abc.ABC"}, {"fullname": "autoop.core.ml.model.model.Model.__init__", "modulename": "autoop.core.ml.model.model", "qualname": "Model.__init__", "kind": "function", "doc": "<p>Initialise Model instance</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "autoop.core.ml.model.model.Model.type", "modulename": "autoop.core.ml.model.model", "qualname": "Model.type", "kind": "variable", "doc": "<p>Return model's type.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: type of the model</p>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "autoop.core.ml.model.model.Model.name", "modulename": "autoop.core.ml.model.model", "qualname": "Model.name", "kind": "variable", "doc": "<p>Return model's name.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: name of model</p>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "autoop.core.ml.model.model.Model.parameters", "modulename": "autoop.core.ml.model.model", "qualname": "Model.parameters", "kind": "variable", "doc": "<p>Return object's parameters.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>dict: dictionary containing the object's parameters.</p>\n</blockquote>\n"}, {"fullname": "autoop.core.ml.model.model.Model.fit", "modulename": "autoop.core.ml.model.model", "qualname": "Model.fit", "kind": "function", "doc": "<p>Update the model's parameters based on new observations.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>observations:</strong>  the observations to fit</li>\n<li><strong>ground_truth:</strong>  ground truth to fit</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">observations</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">ground_truth</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "autoop.core.ml.model.model.Model.predict", "modulename": "autoop.core.ml.model.model", "qualname": "Model.predict", "kind": "function", "doc": "<p>Predict ground truth for the observations based on the model's\nparameters.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>observations:</strong>  observations on which to conduct the prediction</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>ndarray: array containing the predictions</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">observations</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "autoop.core.ml.model.regression", "modulename": "autoop.core.ml.model.regression", "kind": "module", "doc": "<p>Package containing regression models.</p>\n\n<h6 id=\"modules\">Modules:</h6>\n\n<blockquote>\n  <ul>\n  <li>lasso_regression: defines the Decision Lasso Regression model</li>\n  <li>multiple_linear_regression: defines the Multiple Linear Regression model</li>\n  <li>ridge_regression: defines the Ridge Regression model</li>\n  </ul>\n</blockquote>\n"}, {"fullname": "autoop.core.ml.model.regression.lasso_regression", "modulename": "autoop.core.ml.model.regression.lasso_regression", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "autoop.core.ml.model.regression.lasso_regression.Lasso", "modulename": "autoop.core.ml.model.regression.lasso_regression", "qualname": "Lasso", "kind": "class", "doc": "<p>Facade class for the sklean Lasso model.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>_type(str):</strong>  static attribute representing the Model's type: regression</li>\n<li><strong>_name(str):</strong>  static attribute representing the model's name</li>\n<li><strong>_lasso:</strong>  linear_model.Lasso model used for the calculations.</li>\n</ul>\n", "bases": "autoop.core.ml.model.model.Model"}, {"fullname": "autoop.core.ml.model.regression.lasso_regression.Lasso.__init__", "modulename": "autoop.core.ml.model.regression.lasso_regression", "qualname": "Lasso.__init__", "kind": "function", "doc": "<p>Inititalise instance of the Lasso class</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "autoop.core.ml.model.regression.lasso_regression.Lasso.fit", "modulename": "autoop.core.ml.model.regression.lasso_regression", "qualname": "Lasso.fit", "kind": "function", "doc": "<p>Adjust model's parameters in accordance with the observations and\nground truth.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>observations:</strong>  ndarray of observations to be fitted</li>\n<li><strong>ground_truth:</strong>  ndarray containing ground truth to be fitted</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">observations</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">ground_truth</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "autoop.core.ml.model.regression.lasso_regression.Lasso.predict", "modulename": "autoop.core.ml.model.regression.lasso_regression", "qualname": "Lasso.predict", "kind": "function", "doc": "<p>Predict the ground truth based on given observations.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>observations:</strong>  ndarray of observations used to reach prediction</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>ndarray: the predictions for the given observations</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">observations</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "autoop.core.ml.model.regression.lasso_regression.Lasso.parameters", "modulename": "autoop.core.ml.model.regression.lasso_regression", "qualname": "Lasso.parameters", "kind": "variable", "doc": "<p>Return model's parameters.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>dict: model's parameters</p>\n</blockquote>\n", "annotation": ": dict"}, {"fullname": "autoop.core.ml.model.regression.multiple_linear_regression", "modulename": "autoop.core.ml.model.regression.multiple_linear_regression", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "autoop.core.ml.model.regression.multiple_linear_regression.MultipleLinearRegression", "modulename": "autoop.core.ml.model.regression.multiple_linear_regression", "qualname": "MultipleLinearRegression", "kind": "class", "doc": "<p>Facade class for the sklearn's LinearRegression model.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>_type(str):</strong>  static attribute representing the Model's type: regression</li>\n<li><strong>_name(str):</strong>  static attribute representing the model's name</li>\n<li><strong>_model(LinearRegression):</strong>  LinearRegression model used for the\ncalculations</li>\n</ul>\n", "bases": "autoop.core.ml.model.model.Model"}, {"fullname": "autoop.core.ml.model.regression.multiple_linear_regression.MultipleLinearRegression.__init__", "modulename": "autoop.core.ml.model.regression.multiple_linear_regression", "qualname": "MultipleLinearRegression.__init__", "kind": "function", "doc": "<p>Initialise an instance of the MultipleLinearRegression class</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "autoop.core.ml.model.regression.multiple_linear_regression.MultipleLinearRegression.fit", "modulename": "autoop.core.ml.model.regression.multiple_linear_regression", "qualname": "MultipleLinearRegression.fit", "kind": "function", "doc": "<p>Update the parameters based on the new provided data.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>observations:</strong>  observations to fit</li>\n<li><strong>ground_truth:</strong>  ground truth to fit</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">observations</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">ground_truth</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "autoop.core.ml.model.regression.multiple_linear_regression.MultipleLinearRegression.predict", "modulename": "autoop.core.ml.model.regression.multiple_linear_regression", "qualname": "MultipleLinearRegression.predict", "kind": "function", "doc": "<p>Make a prediction based on the given observations.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>observations:</strong>  observations for prediction</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>ndarray: array containing the predictions</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">observations</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "autoop.core.ml.model.regression.multiple_linear_regression.MultipleLinearRegression.parameters", "modulename": "autoop.core.ml.model.regression.multiple_linear_regression", "qualname": "MultipleLinearRegression.parameters", "kind": "variable", "doc": "<p>Return the model's parameters.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>dict: model's parameters</p>\n</blockquote>\n", "annotation": ": dict"}, {"fullname": "autoop.core.ml.model.regression.ridge_regression", "modulename": "autoop.core.ml.model.regression.ridge_regression", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "autoop.core.ml.model.regression.ridge_regression.Ridge", "modulename": "autoop.core.ml.model.regression.ridge_regression", "qualname": "Ridge", "kind": "class", "doc": "<p>Facade class for the sklean Ridge model.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>_type(str):</strong>  static attribute representing the Model's type: regression</li>\n<li><strong>_name(str):</strong>  static attribute representing the model's name</li>\n<li><strong>_ridge(Ridge):</strong>  linear_model.Ridge model used for the calculations</li>\n</ul>\n", "bases": "autoop.core.ml.model.model.Model"}, {"fullname": "autoop.core.ml.model.regression.ridge_regression.Ridge.__init__", "modulename": "autoop.core.ml.model.regression.ridge_regression", "qualname": "Ridge.__init__", "kind": "function", "doc": "<p>Initialise instance of the Ridge class.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "autoop.core.ml.model.regression.ridge_regression.Ridge.fit", "modulename": "autoop.core.ml.model.regression.ridge_regression", "qualname": "Ridge.fit", "kind": "function", "doc": "<p>Adjust model's parameters in accordance with the observations and\nground truth.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>observations:</strong>  ndarray of observations to be fitted.</li>\n<li><strong>ground_truth:</strong>  ndarray containing ground truth to be fitted.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">observations</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">ground_truth</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "autoop.core.ml.model.regression.ridge_regression.Ridge.predict", "modulename": "autoop.core.ml.model.regression.ridge_regression", "qualname": "Ridge.predict", "kind": "function", "doc": "<p>Predict the ground truth based on given observations.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>observations:</strong>  ndarray of observations used to reach prediction.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>ndarray of the predictions for the given observations.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">observations</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "autoop.core.ml.model.regression.ridge_regression.Ridge.parameters", "modulename": "autoop.core.ml.model.regression.ridge_regression", "qualname": "Ridge.parameters", "kind": "variable", "doc": "<p>Return model's paranmeters.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>dict: model's parameters</p>\n</blockquote>\n", "annotation": ": dict"}, {"fullname": "autoop.core.ml.pipeline", "modulename": "autoop.core.ml.pipeline", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "autoop.core.ml.pipeline.Pipeline", "modulename": "autoop.core.ml.pipeline", "qualname": "Pipeline", "kind": "class", "doc": "<p>Class representing a machine learning pipeline.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>metrics(List[Metric]):</strong>  list of metrics to be applies on the predictions</li>\n<li><strong>dataset(Dataset):</strong>  dataset containing the data</li>\n<li><strong>model(Model):</strong>  the used machine learning model</li>\n<li><strong>input_features(List[Feature]):</strong>  list of features acting as input</li>\n<li><strong>target_feature(Feature):</strong>  target feature</li>\n<li><strong>split(float):</strong>  how much of the data that will be used for training</li>\n</ul>\n"}, {"fullname": "autoop.core.ml.pipeline.Pipeline.__init__", "modulename": "autoop.core.ml.pipeline", "qualname": "Pipeline.__init__", "kind": "function", "doc": "<p>Initialize a Pipeline object.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>metrics(List[Metric]):</strong>  list of metrics to be applies on the\npredictions</li>\n<li><strong>dataset(Dataset):</strong>  dataset containing the data</li>\n<li><strong>model(Model):</strong>  the used machine learning model</li>\n<li><strong>input_features(List[Feature]):</strong>  list of features acting as input</li>\n<li><strong>target_feature(Feature):</strong>  target feature</li>\n<li><strong>split(float):</strong>  how much of the data that will be used for training</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">metrics</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">autoop</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">ml</span><span class=\"o\">.</span><span class=\"n\">metric</span><span class=\"o\">.</span><span class=\"n\">Metric</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">dataset</span><span class=\"p\">:</span> <span class=\"n\">autoop</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">ml</span><span class=\"o\">.</span><span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">Dataset</span>,</span><span class=\"param\">\t<span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">autoop</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">ml</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">Model</span>,</span><span class=\"param\">\t<span class=\"n\">input_ftrs</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">autoop</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">ml</span><span class=\"o\">.</span><span class=\"n\">feature</span><span class=\"o\">.</span><span class=\"n\">Feature</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">target_ftr</span><span class=\"p\">:</span> <span class=\"n\">autoop</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">ml</span><span class=\"o\">.</span><span class=\"n\">feature</span><span class=\"o\">.</span><span class=\"n\">Feature</span>,</span><span class=\"param\">\t<span class=\"n\">split</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.8</span></span>)</span>"}, {"fullname": "autoop.core.ml.pipeline.Pipeline.model", "modulename": "autoop.core.ml.pipeline", "qualname": "Pipeline.model", "kind": "variable", "doc": "<p>Return the object's model.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Model: object's model</p>\n</blockquote>\n", "annotation": ": autoop.core.ml.model.model.Model"}, {"fullname": "autoop.core.ml.pipeline.Pipeline.artifacts", "modulename": "autoop.core.ml.pipeline", "qualname": "Pipeline.artifacts", "kind": "variable", "doc": "<p>Used to get the artifacts generated during the pipeline execution to\nbe saved.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>List[Artifact]</p>\n</blockquote>\n", "annotation": ": List[autoop.core.ml.artifact.Artifact]"}, {"fullname": "autoop.core.ml.pipeline.Pipeline.execute", "modulename": "autoop.core.ml.pipeline", "qualname": "Pipeline.execute", "kind": "function", "doc": "<p>Execute the pipeline: preprocess the data, train the model (if\nonly_test_data is False), run the data through the model,\nevaluate the results based on the metrics.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>only_test_data:</strong>  indicates if we should train the model (False), or\nrun just it on the entire dataset (True)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>dict: dictionary contain</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "autoop.core.ml.pipeline.Pipeline.results_as_string", "modulename": "autoop.core.ml.pipeline", "qualname": "Pipeline.results_as_string", "kind": "function", "doc": "<p>Turn the results of the execute method into a nicely formatted\nstring.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>results:</strong>  the results to turn into a string</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: the formatted results</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">results</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "autoop.core.ml.pipeline.Pipeline.predict_new_data", "modulename": "autoop.core.ml.pipeline", "qualname": "Pipeline.predict_new_data", "kind": "function", "doc": "<p>Make predictions based on the new new data.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>dataset:</strong>  the dataset on which to perform the prediction.</li>\n<li><strong>input_features:</strong>  the input features</li>\n<li><strong>as_str:</strong>  if the results should be returned as a string</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>dict|str: representation of the predictions, str if as_str is True,\n      dict otherwise</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">dataset</span><span class=\"p\">:</span> <span class=\"n\">autoop</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">ml</span><span class=\"o\">.</span><span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">Dataset</span>,</span><span class=\"param\">\t<span class=\"n\">input_features</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">autoop</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">ml</span><span class=\"o\">.</span><span class=\"n\">feature</span><span class=\"o\">.</span><span class=\"n\">Feature</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">as_str</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "autoop.core.ml.pipeline.Pipeline.to_artifact", "modulename": "autoop.core.ml.pipeline", "qualname": "Pipeline.to_artifact", "kind": "function", "doc": "<p>Turn the current pipeline into an artifact.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name:</strong>  name of the artifact</li>\n<li><strong>id:</strong>  id of the artifact into the database</li>\n<li><strong>path:</strong>  path of the artifact</li>\n<li><strong>version:</strong>  version of the artifact</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Artifact: the generated artifact</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"nb\">id</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">version</span><span class=\"o\">=</span><span class=\"s1\">&#39;1.0.0&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">autoop</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">ml</span><span class=\"o\">.</span><span class=\"n\">artifact</span><span class=\"o\">.</span><span class=\"n\">Artifact</span>:</span></span>", "funcdef": "def"}, {"fullname": "autoop.core.ml.pipeline.Pipeline.from_artefact", "modulename": "autoop.core.ml.pipeline", "qualname": "Pipeline.from_artefact", "kind": "function", "doc": "<p>Classmethod to turn the given artifact into a pipeline.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>artifact:</strong>  Artifact to turn</li>\n<li><strong>registry:</strong>  registry containing the artifact</li>\n</ul>\n\n<h6 id=\"return\">Return:</h6>\n\n<blockquote>\n  <p>Pipeline</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">artifact</span><span class=\"p\">:</span> <span class=\"n\">autoop</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">ml</span><span class=\"o\">.</span><span class=\"n\">artifact</span><span class=\"o\">.</span><span class=\"n\">Artifact</span>,</span><span class=\"param\">\t<span class=\"n\">registry</span><span class=\"p\">:</span> <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">ArtifactRegistry</span></span><span class=\"return-annotation\">) -> <span class=\"n\">autoop</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">ml</span><span class=\"o\">.</span><span class=\"n\">pipeline</span><span class=\"o\">.</span><span class=\"n\">Pipeline</span>:</span></span>", "funcdef": "def"}, {"fullname": "autoop.core.storage", "modulename": "autoop.core.storage", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "autoop.core.storage.NotFoundError", "modulename": "autoop.core.storage", "qualname": "NotFoundError", "kind": "class", "doc": "<p>Class representing a custom error for a path not found</p>\n", "bases": "builtins.Exception"}, {"fullname": "autoop.core.storage.NotFoundError.__init__", "modulename": "autoop.core.storage", "qualname": "NotFoundError.__init__", "kind": "function", "doc": "<p>Initialise a NotFoundError instance.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>path (str):</strong>  path not found</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, {"fullname": "autoop.core.storage.Storage", "modulename": "autoop.core.storage", "qualname": "Storage", "kind": "class", "doc": "<p>Abstract class representing a storage for data to be stored in.</p>\n", "bases": "abc.ABC"}, {"fullname": "autoop.core.storage.Storage.save", "modulename": "autoop.core.storage", "qualname": "Storage.save", "kind": "function", "doc": "<p>Save data to a given path</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>data (bytes):</strong>  Data to save</li>\n<li><strong>path (str):</strong>  Path to save data</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">bytes</span>, </span><span class=\"param\"><span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "autoop.core.storage.Storage.load", "modulename": "autoop.core.storage", "qualname": "Storage.load", "kind": "function", "doc": "<p>Load data from a given path</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>path (str):</strong>  Path to load data</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bytes: Loaded data</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bytes</span>:</span></span>", "funcdef": "def"}, {"fullname": "autoop.core.storage.Storage.delete", "modulename": "autoop.core.storage", "qualname": "Storage.delete", "kind": "function", "doc": "<p>Delete data at a given path</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>path (str):</strong>  Path to delete data</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "autoop.core.storage.Storage.list", "modulename": "autoop.core.storage", "qualname": "Storage.list", "kind": "function", "doc": "<p>List all paths under a given path</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>path (str):</strong>  Path to list</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>list: List of paths</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "autoop.core.storage.LocalStorage", "modulename": "autoop.core.storage", "qualname": "LocalStorage", "kind": "class", "doc": "<p>Class representing a locally existent storage.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>_base_path (str):</strong>  base path for files to be stored.</li>\n</ul>\n", "bases": "Storage"}, {"fullname": "autoop.core.storage.LocalStorage.__init__", "modulename": "autoop.core.storage", "qualname": "LocalStorage.__init__", "kind": "function", "doc": "<p>Initialize an object of the LocalStorage type.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>base_path:</strong>  base path for files to be stored.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">base_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;./assets&#39;</span></span>)</span>"}, {"fullname": "autoop.core.storage.LocalStorage.save", "modulename": "autoop.core.storage", "qualname": "LocalStorage.save", "kind": "function", "doc": "<p>Save data with a specific key.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>data (bytes):</strong>  Data to save</li>\n<li><strong>key (str):</strong>  Key of the saved data, used in creating its path</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">bytes</span>, </span><span class=\"param\"><span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "autoop.core.storage.LocalStorage.load", "modulename": "autoop.core.storage", "qualname": "LocalStorage.load", "kind": "function", "doc": "<p>Load data with a given key.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>key (str):</strong>  Key of the data</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bytes: Loaded data</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bytes</span>:</span></span>", "funcdef": "def"}, {"fullname": "autoop.core.storage.LocalStorage.delete", "modulename": "autoop.core.storage", "qualname": "LocalStorage.delete", "kind": "function", "doc": "<p>Delete data with a given key.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>key (str):</strong>  Key of the data</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;/&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "autoop.core.storage.LocalStorage.list", "modulename": "autoop.core.storage", "qualname": "LocalStorage.list", "kind": "function", "doc": "<p>List all paths under a given prefix</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>path (str):</strong>  Path to list</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>list: List of paths</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">prefix</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "autoop.functional", "modulename": "autoop.functional", "kind": "module", "doc": "<p>Package for functional tasks.</p>\n\n<h6 id=\"modules\">Modules:</h6>\n\n<blockquote>\n  <ul>\n  <li>feature: allows for the detection of feature types (categorical\n  or numerical)</li>\n  <li>preprocessing: preprocesses input</li>\n  </ul>\n</blockquote>\n"}, {"fullname": "autoop.functional.feature", "modulename": "autoop.functional.feature", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "autoop.functional.feature.detect_feature_types", "modulename": "autoop.functional.feature", "qualname": "detect_feature_types", "kind": "function", "doc": "<p>Detect the features of a given dataset.\nAssumption: only categorical and numerical features and no NaN values.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>dataset:</strong>  Dataset containing the features.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>List[Feature]: List of features belonging to the dataset.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">dataset</span><span class=\"p\">:</span> <span class=\"n\">autoop</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">ml</span><span class=\"o\">.</span><span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">Dataset</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">autoop</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">ml</span><span class=\"o\">.</span><span class=\"n\">feature</span><span class=\"o\">.</span><span class=\"n\">Feature</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "autoop.functional.preprocessing", "modulename": "autoop.functional.preprocessing", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "autoop.functional.preprocessing.preprocess_features", "modulename": "autoop.functional.preprocessing", "qualname": "preprocess_features", "kind": "function", "doc": "<p>Preprocess features.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>features (List[Feature]):</strong>  List of features.</li>\n<li><strong>dataset (Dataset):</strong>  Dataset object.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>List[str, Tuple[np.ndarray, dict]]: List of preprocessed features.\n  Each ndarray of shape (N, ...)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">features</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">autoop</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">ml</span><span class=\"o\">.</span><span class=\"n\">feature</span><span class=\"o\">.</span><span class=\"n\">Feature</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">dataset</span><span class=\"p\">:</span> <span class=\"n\">autoop</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">ml</span><span class=\"o\">.</span><span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">Dataset</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();